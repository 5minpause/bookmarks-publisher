/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// src/main.ts
var import_obsidian4 = require("obsidian");

// src/modals.ts
var import_obsidian = require("obsidian");
var CommentaryModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
    this.commentary = "";
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Add Commentary" });
    contentEl.createEl("p", { text: "Add your commentary below (Markdown supported):" });
    const textArea = contentEl.createEl("textarea", { attr: { rows: "5" } });
    textArea.style.width = "100%";
    textArea.style.marginBottom = "1em";
    const buttonContainer = contentEl.createEl("div", { cls: "modal-button-container" });
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "1em";
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    const submitButton = buttonContainer.createEl("button", { text: "Publish" });
    cancelButton.onclick = () => {
      this.commentary = "";
      this.close();
    };
    submitButton.onclick = () => {
      this.commentary = textArea.value;
      this.close();
    };
  }
  onClose() {
    if (this.resolvePromise) {
      this.resolvePromise(this.commentary);
    }
  }
  async getCommentary() {
    return new Promise((resolve) => {
      this.resolvePromise = resolve;
    });
  }
};

// src/settings.ts
var import_obsidian2 = require("obsidian");
var BookmarksPublisherSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Bookmarks Publisher Settings" });
    new import_obsidian2.Setting(containerEl).setName("API Token").setDesc("Your Micro.blog API token").addText((text) => text.setPlaceholder("Enter your API token").setValue(this.plugin.settings.apiToken).onChange(async (value) => {
      this.plugin.settings.apiToken = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Blog ID").setDesc("Your Micro.blog blog ID").addText((text) => text.setPlaceholder("Enter your blog ID").setValue(this.plugin.settings.blogId).onChange(async (value) => {
      this.plugin.settings.blogId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Default Tag").setDesc("Default tag to use when publishing posts").addText((text) => text.setPlaceholder("Enter default tag").setValue(this.plugin.settings.defaultTag).onChange(async (value) => {
      this.plugin.settings.defaultTag = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/services.ts
var import_obsidian3 = require("obsidian");
var MicroBlogService = class {
  constructor(settings) {
    this.settings = settings;
  }
  async publishPost(content, tags, blogId) {
    if (!this.settings.apiToken) {
      new import_obsidian3.Notice("Micro.blog API token not configured");
      return false;
    }
    try {
      console.log("Sending to Micro.blog:", { content, tags, blogId });
      const response = await fetch("https://micro.blog/micropub", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.settings.apiToken}`,
          "Content-Type": "application/x-www-form-urlencoded"
        },
        body: new URLSearchParams({
          "h": "entry",
          "content": content,
          ...tags.reduce((acc, tag) => ({ ...acc, [`category[]`]: tag }), {}),
          "mp-destination": blogId
        }).toString()
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return true;
    } catch (error) {
      console.error("Error sending to Micro.blog:", error);
      return false;
    }
  }
};

// src/main.ts
var BookmarksPublisher = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.microBlogService = new MicroBlogService(this.settings);
    this.addSettingTab(new BookmarksPublisherSettingTab(this.app, this));
    this.addCommand({
      id: "publish-note",
      name: "Publish Note to Micro.blog",
      callback: () => this.publishNote()
    });
  }
  async onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, {
      apiToken: "",
      blogId: "",
      defaultTag: "obsidian"
    }, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async publishNote() {
    try {
      const noteMetadata = await this.getActiveNoteMetadata();
      if (!noteMetadata) {
        new import_obsidian4.Notice("No active note found.");
        return;
      }
      const commentaryModal = new CommentaryModal(this.app);
      commentaryModal.open();
      const commentary = await commentaryModal.getCommentary();
      const tags = [...noteMetadata.tags.filter((tag) => tag !== "clippings"), this.settings.defaultTag];
      const content = this.preparePostContent(noteMetadata, commentary, tags);
      console.log("Post content:", content);
      const success = await this.microBlogService.publishPost(
        content,
        tags,
        this.settings.blogId
      );
      new import_obsidian4.Notice(success ? "Note published!" : "Failed to publish note.");
    } catch (error) {
      console.error("Error in publishNote:", error);
      new import_obsidian4.Notice(`Error publishing note: ${error.message}`);
    }
  }
  preparePostContent(metadata, commentary, tags) {
    let content = `# ${metadata.title}

`;
    content += `Source: ${metadata.source}

`;
    if (commentary && commentary.trim()) {
      content += `${commentary.trim()}

`;
    }
    const displayTags = tags.filter((tag) => tag !== "bookmark");
    if (displayTags && displayTags.length > 0) {
      content += `Tags: ${displayTags.join(", ")}
`;
    }
    return content.trim();
  }
  async getActiveNoteMetadata() {
    var _a, _b;
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile)
      return null;
    try {
      const fileContent = await this.app.vault.read(activeFile);
      const frontmatter = (_a = this.app.metadataCache.getFileCache(activeFile)) == null ? void 0 : _a.frontmatter;
      if (!frontmatter) {
        throw new Error("No frontmatter found in note");
      }
      const frontmatterTags = frontmatter.tags || [];
      const fileTags = ((_b = this.app.metadataCache.getFileCache(activeFile)) == null ? void 0 : _b.tags) || [];
      const allTags = [.../* @__PURE__ */ new Set([...frontmatterTags, ...fileTags.map((t) => t.tag)])];
      console.log("Collected tags:", allTags);
      return {
        title: frontmatter.title || activeFile.basename,
        source: frontmatter.source || "",
        tags: allTags
      };
    } catch (error) {
      console.error("Error reading file:", error);
      return null;
    }
  }
};

// main.ts
var main_default = BookmarksPublisher;
